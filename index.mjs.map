{"version":3,"file":"index.mjs","sources":["../lib/discrete_uniform.js","../lib/renormalizing.js","../lib/fisher_yates.js","../lib/vose.js","../lib/validate.js","../lib/factory.js","../lib/index.js","../lib/sample.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Samples from a discrete uniform distribution (equal probabilities and with replacement).\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @returns {Array} sample\n*/\nfunction discreteUniform( x, size, rand ) {\n\tvar pos;\n\tvar out;\n\tvar N;\n\tvar i;\n\n\tN = x.length;\n\tout = new Array( size );\n\tfor ( i = 0; i < size; i++ ) {\n\t\tpos = floor( N * rand() );\n\t\tout[ i ] = x[ pos ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = discreteUniform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Samples without replacement from a discrete set using custom probabilities.\n*\n* ## Notes\n*\n* -   After each draw, the probabilities of the remaining observations are renormalized so that they sum to one.\n*\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @param {ProbabilityArray} probabilities - element probabilities\n* @returns {Array} sample\n*/\nfunction renormalizing( x, size, rand, probabilities ) {\n\tvar probs;\n\tvar psum;\n\tvar out;\n\tvar N;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar u;\n\n\tN = x.length;\n\tprobs = new Array( N );\n\tfor ( i = 0; i < N; i++ ) {\n\t\tprobs[ i ] = probabilities[ i ];\n\t}\n\tout = new Array( size );\n\tfor ( i = 0; i < size; i++ ) {\n\t\tu = rand();\n\t\tpsum = 0;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tpsum += probs[ j ];\n\t\t\tif ( u < psum ) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tfor ( k = 0; k < N; k++ ) {\n\t\t\tif ( k === j ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprobs[ k ] /= 1.0 - probs[ j ];\n\t\t}\n\t\tprobs[ j ] = 0.0;\n\t\tout[ i ] = x[ j ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = renormalizing;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Samples uniformly without replacement using the Fisher-Yates shuffle.\n*\n* ## References\n*\n* -   Knuth, Donald E. 1997. _The Art of Computer Programming, Volume 2 (3rd Ed.): Seminumerical Algorithms_. Boston, MA, USA: Addison-Wesley Longman Publishing Co., Inc.\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @returns {Array} sample\n*/\nfunction fisherYates( x, size, rand ) {\n\tvar tmp;\n\tvar N;\n\tvar i;\n\tvar j;\n\n\tN = x.length;\n\n\t// Note: we skip the first element, as no further swaps are possible given that all other indices are excluded from swapping...\n\tfor ( i = N-1; i > 0; i-- ) {\n\t\t// Generate an integer index on the interval: [0,i]\n\t\tj = floor( rand()*(i+1) );\n\n\t\t// Swap elements:\n\t\ttmp = x[ i ];\n\t\tx[ i ] = x[ j ];\n\t\tx[ j ] = tmp;\n\t}\n\treturn slice.call( x, 0, size );\n}\n\n\n// EXPORTS //\n\nmodule.exports = fisherYates;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math-base-special-floor' );\n\n\n// MAIN //\n\n/**\n* Samples with replacement and non-uniform probabilities using Vose's [alias method][alias-method].\n*\n* ## References\n*\n* -   Vose, Michael D. 1991. \"A linear algorithm for generating random numbers with a given distribution.\" _IEEE Transactions on Software Engineering_ 17 (9): 972â€“75. doi:[10.1109/32.92917][@vose:1991].\n*\n* [alias-method]: http://keithschwarz.com/darts-dice-coins/\n* [@vose:1991]: https://doi.org/10.1109/32.92917\n*\n*\n* @private\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {NonNegativeInteger} size - sample size\n* @param {Function} rand - PRNG for generating uniformly distributed numbers\n* @param {ProbabilityArray} probabilities - element probabilities\n* @returns {Array} sample\n*/\nfunction vose( x, size, rand, probabilities ) {\n\tvar small;\n\tvar large;\n\tvar probs;\n\tvar alias;\n\tvar out;\n\tvar N;\n\tvar p;\n\tvar g;\n\tvar i;\n\tvar l;\n\n\tprobs = probabilities.slice();\n\tN = x.length;\n\n\tsmall = [];\n\tlarge = [];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tprobs[ i ] *= N;\n\t\tif ( probs[ i ] < 1.0 ) {\n\t\t\tsmall.push( i );\n\t\t} else {\n\t\t\tlarge.push( i );\n\t\t}\n\t}\n\talias = new Array( N );\n\tp = new Array( N );\n\twhile ( small.length !== 0 && large.length !== 0 ) {\n\t\tl = small.shift();\n\t\tg = large.shift();\n\t\tp[ l ] = probs[ l ];\n\t\talias[ l ] = g;\n\t\tprobs[ g ] = probs[ g ] + probs[ l ] - 1.0;\n\t\tif ( probs[ g ] < 1.0 ) {\n\t\t\tsmall.push( g );\n\t\t} else {\n\t\t\tlarge.push( g );\n\t\t}\n\t}\n\tfor ( i = 0; i < large.length; i++ ) {\n\t\tp[ large[ i ] ] = 1.0;\n\t}\n\tfor ( i = 0; i < small.length; i++ ) {\n\t\tp[ small[ i ] ] = 1.0;\n\t}\n\tout = new Array( size );\n\tfor ( i = 0; i < size; i++ ) {\n\t\tl = floor( N*rand() );\n\t\tif ( rand() < p[ l ] ) {\n\t\t\tout[ i ] = x[ l ];\n\t\t} else {\n\t\t\tout[ i ] = x[ alias[ l ] ];\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = vose;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' );\nvar isUnityProbabilityArray = require( '@stdlib/assert-is-unity-probability-array' );\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {NonNegativeInteger} [options.size] - sample size\n* @param {ProbabilityArray} [options.probs] - element probabilities\n* @param {boolean} [options.replace] - boolean indicating whether to sample with replacement\n* @param {boolean} [options.mutate] - boolean indicating whether to mutate the `pool` when sampling without replacement\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'size': 10,\n*     'replace': false,\n*     'mutate': true,\n*     'probs': [ 0.7, 0.3 ]\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'size' ) ) {\n\t\topts.size = options.size;\n\t\tif ( !isNonNegativeInteger( opts.size ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'size', opts.size ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'probs' ) ) {\n\t\topts.probs = options.probs;\n\t\tif ( !isUnityProbabilityArray( opts.probs ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array of probabilities that sum to one. Option: `%s`.', 'probs', opts.probs ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mutate' ) ) {\n\t\topts.mutate = options.mutate;\n\t\tif ( !isBoolean( opts.mutate ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'mutate', opts.mutate ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'replace' ) ) {\n\t\topts.replace = options.replace;\n\t\tif ( !isBoolean( opts.replace ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'replace', opts.replace ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar isArrayLike = require( '@stdlib/assert-is-array-like' );\nvar isTypedArrayLike = require( '@stdlib/assert-is-typed-array-like' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar format = require( '@stdlib/string-format' );\nvar randu = require( '@stdlib/random-base-mt19937' ).factory;\nvar copy = require( '@stdlib/utils-copy' );\nvar discreteUniform = require( './discrete_uniform.js' );\nvar renormalizing = require( './renormalizing.js' );\nvar fisherYates = require( './fisher_yates.js' );\nvar vose = require( './vose.js' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Returns a function to sample elements from an array-like object.\n*\n* @param {(ArrayLike|TypedArrayLike)} [pool] - array-like object from which to sample\n* @param {Options} [options] - function options\n* @param {PositiveInteger} [options.seed] - integer-valued seed\n* @param {NonNegativeInteger} [options.size] - sample size\n* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement\n* @throws {TypeError} `pool` must be an array-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Function} function to sample elements from an array-like object\n*\n* @example\n* var sample = factory({\n*     'seed': 232\n* });\n* var out = sample( 'abcdefg' );\n* // e.g., returns [ 'g', 'd', 'g', 'f', 'c', 'e', 'f' ]\n*\n* @example\n* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {\n*     'seed': 232,\n*     'size': 2\n* });\n* var out = sample();\n* // e.g., returns [ 6, 4 ]\n*\n* out = sample();\n* // e.g., returns [ 6, 5 ]\n*\n* @example\n* var sample = factory( [ 1, 2, 3, 4, 5, 6 ], {\n*     'seed': 474,\n*     'size': 3,\n*     'mutate': true,\n*     'replace': false\n* });\n* var out = sample();\n* // e.g., returns [ 4, 3, 6 ]\n*\n* out = sample();\n* // e.g., returns [ 1, 5, 2 ]\n*\n* out = sample();\n* // returns null\n*\n* @example\n* var sample = factory( [ 0, 1 ], {\n*     'size': 2\n* });\n*\n* var out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* out = sample({\n*     'size': 10\n* });\n* // e.g., returns [ 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 ]\n*\n* @example\n* var sample = factory( [ 0, 1 ], {\n*     'size': 2\n* });\n*\n* var out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* out = sample({\n*     'replace': false\n* });\n* // e.g., returns [ 0, 1 ] or [ 1, 0 ]\n*\n* out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* @example\n* var sample = factory( [ 0, 1 ], {\n*     'size': 2,\n*     'mutate': true\n* });\n*\n* var out = sample();\n* // e.g., returns [ 1, 1 ]\n*\n* out = sample({\n*     'replace': false\n* });\n* // e.g., returns [ 0, 1 ] or [ 1, 0 ]\n*\n* out = sample();\n* // returns null\n*/\nfunction factory() {\n\tvar config;\n\tvar pool;\n\tvar conf;\n\tvar rand;\n\tvar err;\n\tvar fcn;\n\n\tconf = copy( defaults );\n\tif ( arguments.length === 1 ) {\n\t\tif ( isArrayLike( arguments[ 0 ] ) || isTypedArrayLike( arguments[ 0 ] ) ) { // eslint-disable-line max-len\n\t\t\tpool = arguments[ 0 ];\n\t\t} else {\n\t\t\tconfig = arguments[ 0 ];\n\t\t\terr = validate( conf, config );\n\t\t}\n\t} else if ( arguments.length > 1 ) {\n\t\tpool = arguments[ 0 ];\n\t\tconfig = arguments[ 1 ];\n\t\tif ( !( isArrayLike( pool ) || isTypedArrayLike( pool ) ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. `pool` argument must be array-like. Value: `%s`.', pool ) );\n\t\t}\n\t\terr = validate( conf, config );\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\tif ( config && config.seed ) {\n\t\trand = randu({\n\t\t\t'seed': config.seed\n\t\t});\n\t} else {\n\t\trand = randu();\n\t}\n\tif ( pool === void 0 ) {\n\t\tfcn = sample1;\n\t} else {\n\t\tif ( isString( pool ) ) {\n\t\t\tpool = pool.split( '' );\n\t\t} else {\n\t\t\tpool = copy( pool );\n\t\t}\n\t\tfcn = sample2;\n\t}\n\tsetReadOnly( fcn, 'seed', rand.seed );\n\tsetReadOnly( fcn, 'PRNG', rand );\n\n\trand = rand.normalized;\n\n\treturn fcn;\n\n\t/**\n\t* Samples elements from an array-like object.\n\t*\n\t* @private\n\t* @param {(ArrayLike|TypedArrayLike)} x - array-like object from which to sample elements\n\t* @param {Options} [options] - function options\n\t* @param {NonNegativeInteger} [options.size] - sample size\n\t* @param {ProbabilityArray} [options.probs] - element probabilities\n\t* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n\t* @throws {TypeError} first argument must be array-like\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`\n\t* @returns {Array} sample\n\t*/\n\tfunction sample1( x, options ) {\n\t\tvar replace;\n\t\tvar xcopy;\n\t\tvar probs;\n\t\tvar opts;\n\t\tvar size;\n\t\tvar err;\n\n\t\tif ( !( isArrayLike( x ) || isTypedArrayLike( x ) ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be array-like. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( isString( x ) ) {\n\t\t\tx = x.split( '' );\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length > 1 ) {\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tif ( opts.replace === void 0 ) {\n\t\t\treplace = conf.replace;\n\t\t} else {\n\t\t\treplace = opts.replace;\n\t\t}\n\t\tif ( opts.probs !== void 0 ) {\n\t\t\tprobs = opts.probs;\n\t\t}\n\t\tif ( opts.size ) {\n\t\t\tsize = opts.size;\n\t\t} else if ( conf.size ) {\n\t\t\tsize = conf.size;\n\t\t} else {\n\t\t\tsize = x.length;\n\t\t}\n\t\tif (\n\t\t\treplace === false &&\n\t\t\tsize > x.length\n\t\t) {\n\t\t\tthrow new RangeError( format( 'invalid input option. `size` option must be less than or equal to the length of `x` when `replace` is `false`. Option: `%s`.', size ) );\n\t\t}\n\t\t// Custom probabilities...\n\t\tif ( probs ) {\n\t\t\tif ( replace ) {\n\t\t\t\treturn vose( x, size, rand, probs );\n\t\t\t}\n\t\t\treturn renormalizing( x, size, rand, probs );\n\t\t}\n\t\t// All elements equally likely...\n\t\tif ( replace ) {\n\t\t\treturn discreteUniform( x, size, rand );\n\t\t}\n\t\txcopy = slice.call( x );\n\t\treturn fisherYates( xcopy, size, rand );\n\t}\n\n\t/**\n\t* Samples elements from a population.\n\t*\n\t* @private\n\t* @param {Options} [options] - function options\n\t* @param {NonNegativeInteger} [options.size] - sample size\n\t* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n\t* @param {boolean} [options.mutate=false] - boolean indicating whether to mutate the `pool` when sampling without replacement\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @throws {RangeError} `size` option must be less than or equal to the population when the `replace` option is `false`\n\t* @returns {Array} sample\n\t*/\n\tfunction sample2( options ) {\n\t\tvar replace;\n\t\tvar mutate;\n\t\tvar opts;\n\t\tvar size;\n\t\tvar err;\n\t\tvar out;\n\n\t\tif ( pool.length === 0 ) {\n\t\t\treturn null;\n\t\t}\n\t\topts = {};\n\t\tif ( arguments.length ) {\n\t\t\terr = validate( opts, options );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\tif ( opts.mutate === void 0 ) {\n\t\t\tmutate = conf.mutate;\n\t\t} else {\n\t\t\tmutate = opts.mutate;\n\t\t}\n\t\tif ( opts.replace === void 0 ) {\n\t\t\treplace = conf.replace;\n\t\t} else {\n\t\t\treplace = opts.replace;\n\t\t}\n\t\tif ( opts.size ) {\n\t\t\tsize = opts.size;\n\t\t} else if ( conf.size ) {\n\t\t\tsize = conf.size;\n\t\t} else {\n\t\t\tsize = pool.length;\n\t\t}\n\t\tif (\n\t\t\treplace === false &&\n\t\t\tsize > pool.length\n\t\t) {\n\t\t\tthrow new RangeError( format( 'invalid input option. `size` option must be less than or equal to the population size when `replace` is `false`. Option: `%s`.', size ) );\n\t\t}\n\t\tif ( replace ) {\n\t\t\treturn discreteUniform( pool, size, rand );\n\t\t}\n\t\tout = fisherYates( pool, size, rand );\n\t\tif ( mutate ) {\n\t\t\t// Remove the sample observations:\n\t\t\tpool = pool.slice( size, pool.length );\n\t\t}\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Sample elements from an array-like object.\n*\n* @module @stdlib/random-sample\n*\n* @example\n* var sample = require( '@stdlib/random-sample' );\n*\n* var out = sample( 'abc' );\n* // e.g., returns [ 'a', 'a', 'b' ]\n*\n* out = sample( [ 3, 6, 9 ] );\n* // e.g., returns [ 3, 9, 6 ]\n*\n* var bool = ( out.length === 3 );\n* // returns true\n*\n* @example\n* var sample = require( '@stdlib/random-sample' );\n*\n* var mysample = sample.factory({\n*     'seed': 323\n* });\n* var out = mysample( [ 3, 6, 9 ], {\n*     'size': 10\n* });\n* // e.g., returns [ 3, 9, 3, 3, 3, 6, 3, 3, 3, 6 ]\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar sample = require( './sample.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( sample, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Samples elements from an array-like object.\n*\n* @name sample\n* @type {Function}\n* @param {ArrayLike} x - array-like object from which to sample\n* @param {Options} [options] - function options\n* @param {NonNegativeInteger} [options.size] - sample size\n* @param {ProbabilityArray} [options.probs] - element probabilities\n* @param {boolean} [options.replace=true] - boolean indicating whether to sample with replacement\n* @throws {TypeError} first argument must be array-like\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} `size` option must be less than or equal to the length of `x` when the `replace` option is `false`\n* @returns {Array} sample\n*\n* @example\n* var out = sample( [ 3, null, NaN, 'abc', function(){} ] );\n* // e.g., returns [ 3, 'abc', null, 3, null ]\n*/\nvar sample = factory();\n\n\n// EXPORTS //\n\nmodule.exports = sample;\n"],"names":["floor","require$$0","discrete_uniform","x","size","rand","pos","out","N","i","length","Array","renormalizing_1","probabilities","probs","psum","j","k","u","slice","prototype","fisher_yates","tmp","call","vose_1","small","large","alias","p","g","l","push","shift","isNonNegativeInteger","isUnityProbabilityArray","require$$1","hasOwnProp","require$$2","isBoolean","require$$3","isPrimitive","isObject","require$$4","format","require$$5","validate_1","opts","options","TypeError","mutate","replace","setReadOnly","isArrayLike","isTypedArrayLike","isString","randu","factory","copy","require$$6","discreteUniform","require$$7","renormalizing","require$$8","fisherYates","require$$9","vose","require$$10","defaults","require$$11","validate","require$$12","factory_1","config","pool","conf","err","fcn","arguments","seed","sample1","split","sample2","normalized","xcopy","RangeError","sample","lib"],"mappings":"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"}